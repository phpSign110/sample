<?php

namespace App\Models;

use Illuminate\Notifications\Notifiable; //消息通知相关功能
use Illuminate\Foundation\Auth\User as Authenticatable;//授权相关功能的引用
use App\Notifications\ResetPassword;
use Illuminate\Support\Facades\Auth;
class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     * 白名单 只会过滤掉create 操作中由$request 提交过来的参数 不会限制save 操作
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     *
     * 隐藏返回数据中的字段
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    protected $table='users';


    //获取用户头像
    public function gravatar($size = '100')
    {
        $hash = md5(strtolower(trim($this->attributes['email'])));

        return "http://www.gravatar.com/avatar/$hash?s=$size";
    }

    //生成令牌 boot 方法会在用户模型类完成初始化之后进行加载
    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function ($user) {
            $user->activation_token = str_random(30);
        });

    }

    //重置密码发送邮件消息
    public function sendPasswordResetNotification($token)
    {
        $this->notify(new ResetPassword($token));
    }

    //一个用户可以有多个微博
    public function statuses()
    {
        return $this->hasMany(Status::class);
    }

    //获取个人微博信息
    public function feed()
    {
        $user_ids = Auth::user()->followings->pluck('id')->toArray();
        array_push($user_ids, Auth::user()->id);
        return Status::whereIn('user_id', $user_ids)
            ->with('user')
            ->orderBy('created_at', 'desc');
    }

    //获取粉丝关系列
    public function followers()
    {
        return $this->belongsToMany(User::Class, 'followers', 'user_id', 'follower_id');
    }

    //获取用户关注人列表
    public function followings()
    {
        return $this->belongsToMany(User::Class, 'followers', 'follower_id', 'user_id');
    }

    //关注
    public function follow($user_ids)
    {
        if (!is_array($user_ids)) {
            $user_ids = compact('user_ids');
        }
        $this->followings()->sync($user_ids, false);
    }

    //取消关注
    public function unfollow($user_ids)
    {
        if (!is_array($user_ids)) {
            $user_ids = compact('user_ids');
        }
        $this->followings()->detach($user_ids);
    }

    //判断是否被关注
    public function isFollowing($user_id)
    {
        //$user->followings == $user->followings()->get()
        return $this->followings->contains($user_id);
    }



}
